// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/11/2021 23:10:34"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ShiftLight
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ShiftLight_vlg_sample_tst(
	CLK,
	Reset,
	RPM1stBit,
	RPM2ndBit,
	RPM3rdBit,
	RPM4thBit,
	RPMsetter,
	sampler_tx
);
input  CLK;
input  Reset;
input  RPM1stBit;
input  RPM2ndBit;
input  RPM3rdBit;
input  RPM4thBit;
input  RPMsetter;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or Reset or RPM1stBit or RPM2ndBit or RPM3rdBit or RPM4thBit or RPMsetter)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ShiftLight_vlg_check_tst (
	Bit1,
	Bit2,
	Bit3,
	Bit4,
	LEDlight,
	sampler_rx
);
input  Bit1;
input  Bit2;
input  Bit3;
input  Bit4;
input  LEDlight;
input sampler_rx;

reg  Bit1_expected;
reg  Bit2_expected;
reg  Bit3_expected;
reg  Bit4_expected;
reg  LEDlight_expected;

reg  Bit1_prev;
reg  Bit2_prev;
reg  Bit3_prev;
reg  Bit4_prev;
reg  LEDlight_prev;

reg  Bit1_expected_prev;
reg  Bit2_expected_prev;
reg  Bit3_expected_prev;
reg  Bit4_expected_prev;
reg  LEDlight_expected_prev;

reg  last_Bit1_exp;
reg  last_Bit2_exp;
reg  last_Bit3_exp;
reg  last_Bit4_exp;
reg  last_LEDlight_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	Bit1_prev = Bit1;
	Bit2_prev = Bit2;
	Bit3_prev = Bit3;
	Bit4_prev = Bit4;
	LEDlight_prev = LEDlight;
end

// update expected /o prevs

always @(trigger)
begin
	Bit1_expected_prev = Bit1_expected;
	Bit2_expected_prev = Bit2_expected;
	Bit3_expected_prev = Bit3_expected;
	Bit4_expected_prev = Bit4_expected;
	LEDlight_expected_prev = LEDlight_expected;
end



// expected LEDlight
initial
begin
	LEDlight_expected = 1'bX;
end 

// expected Bit1
initial
begin
	Bit1_expected = 1'bX;
end 

// expected Bit2
initial
begin
	Bit2_expected = 1'bX;
end 

// expected Bit3
initial
begin
	Bit3_expected = 1'bX;
end 

// expected Bit4
initial
begin
	Bit4_expected = 1'bX;
end 
// generate trigger
always @(Bit1_expected or Bit1 or Bit2_expected or Bit2 or Bit3_expected or Bit3 or Bit4_expected or Bit4 or LEDlight_expected or LEDlight)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Bit1 = %b | expected Bit2 = %b | expected Bit3 = %b | expected Bit4 = %b | expected LEDlight = %b | ",Bit1_expected_prev,Bit2_expected_prev,Bit3_expected_prev,Bit4_expected_prev,LEDlight_expected_prev);
	$display("| real Bit1 = %b | real Bit2 = %b | real Bit3 = %b | real Bit4 = %b | real LEDlight = %b | ",Bit1_prev,Bit2_prev,Bit3_prev,Bit4_prev,LEDlight_prev);
`endif
	if (
		( Bit1_expected_prev !== 1'bx ) && ( Bit1_prev !== Bit1_expected_prev )
		&& ((Bit1_expected_prev !== last_Bit1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bit1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bit1_expected_prev);
		$display ("     Real value = %b", Bit1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Bit1_exp = Bit1_expected_prev;
	end
	if (
		( Bit2_expected_prev !== 1'bx ) && ( Bit2_prev !== Bit2_expected_prev )
		&& ((Bit2_expected_prev !== last_Bit2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bit2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bit2_expected_prev);
		$display ("     Real value = %b", Bit2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Bit2_exp = Bit2_expected_prev;
	end
	if (
		( Bit3_expected_prev !== 1'bx ) && ( Bit3_prev !== Bit3_expected_prev )
		&& ((Bit3_expected_prev !== last_Bit3_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bit3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bit3_expected_prev);
		$display ("     Real value = %b", Bit3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Bit3_exp = Bit3_expected_prev;
	end
	if (
		( Bit4_expected_prev !== 1'bx ) && ( Bit4_prev !== Bit4_expected_prev )
		&& ((Bit4_expected_prev !== last_Bit4_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bit4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bit4_expected_prev);
		$display ("     Real value = %b", Bit4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Bit4_exp = Bit4_expected_prev;
	end
	if (
		( LEDlight_expected_prev !== 1'bx ) && ( LEDlight_prev !== LEDlight_expected_prev )
		&& ((LEDlight_expected_prev !== last_LEDlight_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDlight :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDlight_expected_prev);
		$display ("     Real value = %b", LEDlight_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_LEDlight_exp = LEDlight_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ShiftLight_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg Reset;
reg RPM1stBit;
reg RPM2ndBit;
reg RPM3rdBit;
reg RPM4thBit;
reg RPMsetter;
// wires                                               
wire Bit1;
wire Bit2;
wire Bit3;
wire Bit4;
wire LEDlight;

wire sampler;                             

// assign statements (if any)                          
ShiftLight i1 (
// port map - connection between master ports and signals/registers   
	.Bit1(Bit1),
	.Bit2(Bit2),
	.Bit3(Bit3),
	.Bit4(Bit4),
	.CLK(CLK),
	.LEDlight(LEDlight),
	.Reset(Reset),
	.RPM1stBit(RPM1stBit),
	.RPM2ndBit(RPM2ndBit),
	.RPM3rdBit(RPM3rdBit),
	.RPM4thBit(RPM4thBit),
	.RPMsetter(RPMsetter)
);

// RPM1stBit
initial
begin
	RPM1stBit = 1'b0;
	RPM1stBit = #340000 1'b1;
	RPM1stBit = #60000 1'b0;
end 

// RPM2ndBit
initial
begin
	RPM2ndBit = 1'b0;
	RPM2ndBit = #220000 1'b1;
	RPM2ndBit = #20000 1'b0;
	RPM2ndBit = #40000 1'b1;
	RPM2ndBit = #20000 1'b0;
	RPM2ndBit = #40000 1'b1;
	RPM2ndBit = #60000 1'b0;
end 

// RPM3rdBit
initial
begin
	RPM3rdBit = 1'b0;
	RPM3rdBit = #140000 1'b1;
	RPM3rdBit = #20000 1'b0;
	RPM3rdBit = #100000 1'b1;
	RPM3rdBit = #40000 1'b0;
end 

// RPM4thBit
initial
begin
	RPM4thBit = 1'b0;
end 

// CLK
initial
begin
	repeat(4)
	begin
		CLK = 1'b0;
		CLK = #20000 1'b1;
		# 20000;
	end
	CLK = 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
	CLK = #20000 1'b1;
	CLK = #20000 1'b0;
end 

// RPMsetter
initial
begin
	RPMsetter = 1'b0;
	RPMsetter = #130000 1'b1;
	RPMsetter = #10000 1'b0;
	RPMsetter = #70000 1'b1;
	RPMsetter = #10000 1'b0;
	RPMsetter = #110000 1'b1;
	RPMsetter = #10000 1'b0;
end 

// Reset
initial
begin
	Reset = 1'b0;
	Reset = #260000 1'b1;
	Reset = #10000 1'b0;
end 

ShiftLight_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.Reset(Reset),
	.RPM1stBit(RPM1stBit),
	.RPM2ndBit(RPM2ndBit),
	.RPM3rdBit(RPM3rdBit),
	.RPM4thBit(RPM4thBit),
	.RPMsetter(RPMsetter),
	.sampler_tx(sampler)
);

ShiftLight_vlg_check_tst tb_out(
	.Bit1(Bit1),
	.Bit2(Bit2),
	.Bit3(Bit3),
	.Bit4(Bit4),
	.LEDlight(LEDlight),
	.sampler_rx(sampler)
);
endmodule

